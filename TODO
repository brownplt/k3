Actual feature requests:

- Author response

This will require the most design effort---the submission page currently
has no UI for this, nor does the review page.  We need to sketch the UI
for both places, and decide on the data model that backs it.

- Multiple submissions per account (done)

This requires a layer of indirection.  Currently, when you visit
writer.html, something happens that directs you to a single submission.
We need to simply not do that, and identify where in the data model the
one-to-one constraint exists (if anywhere).

- Past Review Response Upload

We need to get Robby’s opinion on whether simply using another
submissions component is acceptable here, or we want something more
elaborate.

--------------------------------------

Accounts
[x] (1) Associate Gmail accounts with existing accounts
[x] (1) UI for already-existing jpasswords
[] (1) Email for forgot password
[] (1) Write instructions for new submitter page
[] (1) Send mail to Shriram (and Robby) with instructions for new
submitter page

Pages

[] (_) Frontend for writer.js
  [x] (1) Add/Remove author handlers

[x] (2) Identify handlers/models for backend of writer.(html|js)
[x] (_) Move them (and unit-test each one)
  [x] (1) Author/get → became GetWriterPaperInfoHandler
  [x] (1) getBasic → became WriterBasicHandler
  [x] (1) Author/getDeadlineExts → became PaperDeadlineExtensionsHandler
  [x] (1) getAuthorText → became AuthorTextHandler
  [x] (1) Author/setTitle → became PaperSetTitleHandler
  [x] (1) Author/setAuthor → became PaperSetAuthorHandler
  [x] (1) Author/setPcPaper → became PaperSetPcPaperHandler
  [x] (1) Author/setTarget → became PaperSetTargetHandler
  [x] (1) Author/setTopics → became PaperSetTopicsHandler
  [x] (1) Author/<compid>.<cvext> → became PaperGetComponentHandler
  [x] (1) Author/updateComponents → became PaperUpdateComponentsHandler
  [x] (1) [new] AddAuthorHandler
  [x] (1) [new] RemoveAuthorHandler
  [x] (1) [new] AuthorUpdateNameHandler
[x] (2) Move handler usage to frontend of writer.js

[x] (2) Identify handlers/models for backend of admin.(html|js)
[x] (_) Move them (and unit-test each one)
  [x] DecisionValue/delete → became DeleteDecisionValueHandler
  [x] DecisionValue/add → became AddDecisionValueHandler
  [x] Topic/delete → became DeleteTopicHandler
  [x] Topic/add → became AddTopicHandler
  [x] ReviewComponentType/add → became AddReviewComponentTypeHandler
  [x] ComponentType/change → became ChangeComponentTypeHandler
  [x] ComponentType/delete → became DeleteComponentTypeHandler
  [x] ComponentType/add → became AddComponentTypeHandler
  [x] User/changeEmail → became ChangeUserEmailHandler
  [x] User/getIdsByDecision → became GetPapersOfDVHandler
  [x] User/sendEmails → became SendEmailsHandler
  [x] User/setRole­→ became SetRoleHandler 
  [x] ?/setContact → became SetContactHandler
  [x] ?/updateScores → ignored, decision support is weird...
  [x] ?/getAuthorText → became AuthorTextHandler (in submitter.py)
  [x] getAdmin → became GetAdminHandler
  [x] User/getAll → became GetAllHandler
  [x] ?/getSubReviewers → became GetSubReviewersHandler
  [x] UnverifiedUser/addPCs

[] (2) Identify handlers/models for backend of paper.(html|js)
[] (_) Move them (and unit-test each one)
  [] () Paper/<id>/updateDecision
  [x] () updateBids → updateBidsHandler
  [] () Paper/<id>/Review/save
  [] () Paper/<id>/Comment/save
  [] () Paper/<id>/setHidden
  [] () Paper/<id>/setDeadline
  [] () Paper/<id>/Review/get
  [] () Paper/<id>/get
  [] () Paper/<id>/Review/revert
  [] () Paper/<id>/Comment/get
  [] () Paper/<id>/Comment/revert
  [x] () User/getByRole → GetByRoleHandler
  [] () Paper/<id>/getDeadlineExts
  [] () Paper/<id>/getNextID
  [] () Paper/<id>/assignReviews
  [] () compLink [JS function]
  [] () #review.id
  [] () #comment-<id>
  [] () continue.htl?cookie= ...

[] (2) Identify handlers/models for backend of continue.(html|js)
[] (_) Move them (and unit-test each one)
  [x] (1) getPaperSummaries → GetPaperSummariesHandler
    [] How to handle lastChange?  Make all models inherit a superclass?
        Superclass, when something saves, updates the lastc of conf?
    [] Just go through and add calls to update_last_change()...
  [x] (1) getBasic →
  [x] (1) getAbstracts → GetAbstractsHandler
  [x] (1) Paper/<id>/getAbstract → 
  [x] (1) updateBids → UpdateBidsHandler
  [x] (1) getReviewPercentages → GetReviewPercentagesHandler
  [x] (1) getUserBids →
  [x] (1) Paper/<id>/updateDecision → 
  [] (1) genPaperLink() [js function]
  [] (1) compLink() [js function] → GetComponentFileHandler
  (Meeting stuff is less important)
  [] (1) Meeting/setOrder → 
  [] (1) Meeting/jumpTo → 
  [] (1) Meeting/endMeeting → 
  [] (1) Meeting/getOrder →


[] (2) Identify handlers/models for backend of meeting.(html|js)
  [] ...
[] (_) Move them (and unit-test each one)

[] (2) Identify handlers/models for backend of spreadsheet.(html|js)
  [] ...
[] (_) Move them (and unit-test each one)

Misc

[] (2) Sketch a UI for author response---goal is to get FEEDBACK

[] () Move generator to a single call, make the testing superclass not clear out

[] (1) Error on non-PDF for submission
[x] (1) Fix name-redrawing bug
[] (1) One portal for PC members, one for authors?
[] (1) Login styles --- padding next to start, and float the OK button

[] (1) mk_simple_get_handler --- a useful abstraction for some of the backend?

[x] () Refactor all email strings into strings.py
[] () Remove silly logger dependencies from files, strings, accounts, etc
[] () What belongs in accounts.py?

[] () Belay handlers---apply using kwargs to avoid args['blahblah']
[] () Belay knowngrant(handler, data, string): grant a well-known cap
[] () Default return of a CapHandler should be bcapResponsed, special
      returns should be available for files, html, etc.

